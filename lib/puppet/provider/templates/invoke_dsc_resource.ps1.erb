$script:ErrorActionPreference = 'Stop'
$PuppetModulesFolder = Join-Path $env:ProgramFiles 'WindowsPowerShell\Modules\PuppetVendoredModules'
if (!(Test-Path($PuppetModulesFolder))) {
  & cmd.exe /c mklink /d "$PuppetModulesFolder" "<%= vendored_modules_path %>" | Out-Null
}

$currentState = Get-DscLocalConfigurationManager

if ($currentState.RefreshMode -ne 'Disabled') {
  throw "DSC LCM RefreshMode must be set to Disabled for Puppet to execute DSC Resources!"
}

$invokeParams = @{
  Name          = '<%= resource[:dscmeta_resource_friendly_name] %>'
  Method        = '<%= dsc_invoke_method %>'
  ErrorAction   = 'Continue'
  ErrorVariable = 'invokeError'
  Property      = @{
<% dsc_parameters.each do |p| -%>
    <%- name = p.name.to_s.gsub(/^dsc_/,'')
    value = format_dsc_value(p.value)
    value = '\'present\'' if name == 'ensure' && dsc_invoke_method == 'test'
    -%>
    <%= name %> = <%= value %>
<% end -%>
  }<% if resource.parameters[:dscmeta_module_version] %>
  ModuleName = @{
    ModuleName      = <%= "\"#{resource[:dscmeta_module_name]}\"" %>
    RequiredVersion = <%= "\"#{resource[:dscmeta_module_version]}\"" %>
  }
<% else %>
  ModuleName = <%= "\"#{resource[:dscmeta_module_name]}\"" %>
<% end -%>
}

$result = Invoke-DscResource @invokeParams

switch ($invokeParams.Method) {
  'Test' {
    [bool]($result.InDesiredState)
  }
  'Set' {
    @($Null, 0) -contains $result.ReturnValue
  }
}
