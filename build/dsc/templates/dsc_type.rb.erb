begin
  require 'puppet_x/msutter/dsc_provider_helpers'
  require 'puppet_x/msutter/dsc_type_helpers'
rescue LoadError => detail
  require 'pathname'
  lib_path = Pathname.new(__FILE__).dirname.parent.parent
  $:.unshift(lib_path)
  require 'puppetx/msutter/dsc_type_helpers'
  require 'puppetx/msutter/dsc_provider_helpers'
end

Puppet::Type.newtype(:dsc_<%= resource.friendlyname.downcase %>) do
  include Puppetx::Msutter::DscTypeHelpers

  provide :dsc_resource do
    include Puppetx::Msutter::DscProviderHelpers
  end

  @doc = %q{Uses the DSC <%= resource.friendlyname%> resource. }

  validate do
  <%  resource.properties.select{|rp| rp.required? }.each do |property| -%>
    fail('dsc_<%= property.name.downcase %> is a required attribute') if self[:dsc_<%= property.name.downcase %>].nil?
  <%  end -%>
  end

  newparam(:dscmeta_resource_name) do
    defaultto "<%= resource.name %>"
  end

  newparam(:dscmeta_resource_friendly_name) do
    defaultto "<%= resource.friendlyname %>"
  end

<%  if resource.dsc_module -%>
  newparam(:dscmeta_module_name) do
    defaultto "<%= resource.dsc_module %>"
  end
<%  end -%>

  newparam(:name, :namevar => true ) do
  end

<%  if resource.ensurable? -%>
  ensurable do
    defaultvalues
    defaultto :present
  end
<%  end -%>

<%  resource.properties.each do |property| -%>
  # Name:         <%= property.name %>
  # Type:         <%= property.type %>
  # IsMandatory:  <%= property.required? ? 'True' : 'False' %>
  # Values:       <%= property.values ? property.values : 'None' %>
  newparam(:dsc_<%= property.name.downcase %><% if property.array? %>, :array_matching => :all<% end %>) do
<%    if property.description -%>
    desc "<%= property.description %>"
<%    end -%>
<%    if property.required? -%>
    isrequired
<%    end -%>
<%    if property.bool? -%>
    newvalues("True", "False", "true", "false" ,:true, :false, true, false)
<%    end -%>
    validate do |value|
<%    if property.name.downcase == 'ensure' -%>
      resource[:ensure] = value.downcase
<%    end -%>
<%    case -%>
<%    when property.array? -%>
      unless value.kind_of?(Array) || value.kind_of?(String)
        fail("Invalid value '#{value}'. Should be a string or an array of strings")
      end
<%    when property.bool? -%>
<%    when property.int? -%>
      unless value.kind_of?(Numeric)
          fail("Invalid value #{value}. Should be a signed Integer")
      end
<%    when property.uint? -%>
      unless value.kind_of?(Numeric) && value >= 0
          fail("Invalid value #{value}. Should be a unsigned Integer")
      end
<%    else -%>
      unless value.kind_of?(String)
        fail("Invalid value '#{value}'. Should be a string")
      end
<%    end -%>
<%    if property.values && property.values.any? -%>
      valid_values = [<%= property.values.collect{|v| "\"#{v.downcase}\", \"#{v}\"" }.join(", ")%>]
<%      if property.array? -%>
      if value.kind_of?(Array)
        unless (valid_values & value).count == value.count
          fail("Invalid value #{value}. Valid values are #{valid_values.to_s}.")
        end
      end
      if value.kind_of?(String)
        unless valid_values.include?(value)
          fail("Invalid value #{value}. Valid values are #{valid_values.to_s}.")
        end
      end
<%      else -%>
      unless valid_values.include?(value)
        fail("Invalid value #{value}. Valid values are #{valid_values.to_s}.")
      end
<%      end -%>
<%    end -%>
    end
    munge do |value|
<%    case -%>
<%    when property.bool? -%>
      value.to_s.downcase.to_bool
<%    else -%>
      value
<%    end -%>
    end
  end

<%  end %>
end
