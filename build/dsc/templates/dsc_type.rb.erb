require 'pathname'
helper_path = Pathname.new(__FILE__).dirname.parent.parent

# provider specific
$:.unshift(helper_path)
require 'utils/dsc_provider_helpers'
require 'puppet/provider'
require 'erb'

Puppet::Type.newtype(:dsc_<%= resource.friendlyname.downcase %>) do

  provide :dsc_resource do
    include ::Utils::DscProviderHelpers
  end

  newparam(:dsc_fullname) do
    defaultto "<%= resource.name %>"
  end

  newparam(:dsc_resource_name) do
    defaultto "<%= resource.friendlyname %>"
  end

  newparam(:dsc_name_property) do
    defaultto :<%= resource.has_name? %>
  end
  <%  if resource.dsc_module %>  
  newparam(:dsc_module_name) do
    defaultto "<%= resource.dsc_module %>"
  end
  <%  end -%>

  newparam(:name, :namevar => true ) do
  end
  
  ensurable do
    defaultvalues
    defaultto :present
  end


  <%  resource.properties.each do |property| -%>

  # Name:         <%= property.name %>
  # Type:         <%= property.type %>
  # IsMandatory:  <%= property.required? %>
  # Values:       <%= property.values %>
  newparam(:dsc_<%= property.name.downcase %>) do
  <%      if property.required? -%>

    isrequired
  <%      end -%>
  <%      if property.values && property.values.any? -%>

    newvalues(<%= property.values.collect{|v| "\"#{v.downcase}\", \"#{v}\"" }.join(", ")%>)
  <%      end -%>
  <%      if property.bool? -%>

    newvalues("True", "False", "true", "false" ,:true, :false)
  <%      end -%>
  <%      if property.string? && property.values && !property.values.any? -%>

    munge do |value|
      value.downcase
    end
  <%      end -%>
  <%      if property.uint? -%>

    newvalues(/^\d+$/)
  
  <%      end -%>
  <%      if property.int? -%>

    newvalues(/^(\+|\-)\d+$/)
  
  <%      end -%>
  
  end
  <%  end -%>

end

