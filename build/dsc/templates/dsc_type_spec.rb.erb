#!/usr/bin/env ruby
require 'spec_helper'

describe Puppet::Type.type(:dsc_<%= resource.friendlyname.downcase %>) do
  let :dsc_<%= resource.friendlyname.downcase %> do
    Puppet::Type.type(:dsc_<%= resource.friendlyname.downcase %>).new(
      :name     => '<%= @spec_test_values['string'] %>',
<%  resource.properties.select{|rp| rp.required? }.each do |property| -%>
<%    if property.values -%>
      :dsc_<%= property.name.downcase %> => '<%= property.values.first %>',
<%    else -%>
      :dsc_<%= property.name.downcase %> => '<%= @spec_test_values[property.type] %>',
<%    end -%>
<%  end -%>
    )
  end

  it "should stringify normally" do
    expect(dsc_<%= resource.friendlyname.downcase %>.to_s).to eq("Dsc_<%= resource.friendlyname.downcase %>[<%= @spec_test_values['string'] %>]")
  end

  # required attributes
<%  resource.required_properties.each do |required_property| -%>
  it 'should require that dsc_<%= required_property.name.downcase %> is specified' do
    #dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= required_property.name.downcase %>]
    expect { Puppet::Type.type(:dsc_<%= resource.friendlyname.downcase %>).new(
      :name     => '<%= @spec_test_values['string'] %>',
<%    resource.required_properties.select{|rp| rp.name != required_property.name}.each do |other_required_property| -%>
<%      if other_required_property.values -%>
      :dsc_<%= other_required_property.name.downcase %> => '<%= other_required_property.values.first %>',
<%      else -%>
      :dsc_<%= other_required_property.name.downcase %> => '<%= @spec_test_values[other_required_property.type] %>',
<%      end -%>
<%    end -%>
    )}.to raise_error(Puppet::Error, /dsc_<%= required_property.name.downcase %> is a required attribute/)
  end
<%  end -%>
<%  resource.valuated_properties.each do |valuated_property| -%>
<%    valuated_property.values.each do |value| -%>

  it 'should accept dsc_<%= valuated_property.name.downcase %> predefined value <%= value %>' do
    dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= valuated_property.name.downcase %>] = '<%= value %>'
    expect(dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= valuated_property.name.downcase %>]).to eq('<%= value %>')
  end

  it 'should accept dsc_<%= valuated_property.name.downcase %> predefined value <%= value.downcase %>' do
    dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= valuated_property.name.downcase %>] = '<%= value.downcase %>'
    expect(dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= valuated_property.name.downcase %>]).to eq('<%= value.downcase %>')
  end
<%      if valuated_property.name.downcase == 'ensure' -%>

  it 'should accept dsc_ensure predefined value <%= value.downcase %> and update ensure with this value (ensure end value should be a symbol)' do
    dsc_<%= resource.friendlyname.downcase %>[:dsc_ensure] = '<%= value.downcase %>'
    expect(dsc_<%= resource.friendlyname.downcase %>[:ensure]).to eq(dsc_<%= resource.friendlyname.downcase %>[:dsc_ensure].downcase.to_sym)
  end
<%      end -%>
<%    end -%>

  it 'should not accept values not equal to predefined values' do
    expect{dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= valuated_property.name.downcase %>] = 'invalid value'}.to raise_error(Puppet::ResourceError)
  end
<%    if resource.ensurable? -%>

  it 'should default to ensure => present' do
    expect(dsc_<%= resource.friendlyname.downcase %>[:ensure]).to eq :present
  end
<%    end -%>
<%  end -%>
<%  resource.array_properties.each do |array_property| -%>
<%    if array_property.values -%>
  it 'should accept array of predefined values for dsc_<%= array_property.name.downcase %>' do
    dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= array_property.name.downcase %>] = <%= array_property.values %>
    expect(dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= array_property.name.downcase %>]).to eq(<%= array_property.values %>)
  end
<%    else -%>
  it 'should accept array for dsc_<%= array_property.name.downcase %>' do
    dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= array_property.name.downcase %>] = <%= @spec_test_values[array_property.type] %>
    expect(dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= array_property.name.downcase %>]).to eq(<%= @spec_test_values[array_property.type] %>)
  end
<%    end -%>
<%  end -%>
end
